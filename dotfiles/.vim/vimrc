if exists('g:vscode')
    " VSCode extension

    function! MoveVisualSelection(action, direction)
        ": Summary: This calls the editor.action.(move|copy)Lines and manually recalculates the new visual selection

        let markStartLine = "'<"                     " Special mark for the start line of the previous visual selection
        let markEndLine =   "'>"                     " Special mark for the end line of the previous visual selection
        let startLine = getpos(markStartLine)[1]     " Getpos(mark) => [?, lineNum, colNumber, ?]
        let endLine = getpos(markEndLine)[1]
        let removeVsCodeSelectionAfterCommand = 1    " We set the visual selection manually after this command as otherwise it will use the line numbers that correspond to the old positions
        let linecount = getbufinfo('%')[0].linecount
         



        if (a:direction == "Up" && startLine == 1) || (a:direction == "Down" && endLine == linecount) 
            let newStart = startLine
            let newEnd = endLine
        else
          call VSCodeCallRange('editor.action.'. a:action . 'Lines'. a:direction . 'Action', startLine, endLine, removeVsCodeSelectionAfterCommand )
          if a:direction == "Up"
            let newStart = startLine - 1
            let newEnd = endLine - 1
          else 
            let newStart = startLine + 1
            let newEnd = endLine + 1
          endif
        endif
          
        let newVis = "normal!" . newStart . "GV". newEnd . "G"
        ":                  │  └──────────────────── " The dot combines the strings together
        ":                  └─────────────────────── " ! means don't respect any remaps the user has made when executing
        execute newVis
    endfunction

    ":        ┌───────────────────────────────────── " Exit visual mode otherwise our :call will be '<,'>call
    map <A-j> <Esc>:call MoveVisualSelection("move", "Down")<CR>
    map <A-k> <Esc>:call MoveVisualSelection("move", "Up")<CR>

    map <S-A-j> <Esc>:call MoveVisualSelection("copy", "Down")<CR>
    map <S-A-k> <Esc>:call MoveVisualSelection("copy", "Up")<CR>
else
    " ordinary vim

    set relativenumber
    set number
    set nocompatible

    syntax on
    set background=dark

    " highlight matching parens, braces, brackets, etc
    set showmatch

    set hidden

    set autoindent
    set smartindent
    set shiftwidth=4

    colorscheme jamesnzl

    nnoremap <A-j> :m .+1<CR>==
    nnoremap <A-k> :m .-2<CR>==
    inoremap <A-j> <Esc>:m .+1<CR>==gi
    inoremap <A-k> <Esc>:m .-2<CR>==gi
    vnoremap <A-j> :m '>+1<CR>gv=gv
    vnoremap <A-k> :m '<-2<CR>gv=gv

    if !has('nvim')
        " make scrolling and painting fast
        " ttyfast kept for vim compatibility but not needed for nvim
        set ttyfast lazyredraw

        let c='a'
        while c <= 'z'
          exec "set <A-".c.">=\e".c
          exec "imap \e".c." <A-".c.">"
          let c = nr2char(1+char2nr(c))
        endw

        set ttimeout ttimeoutlen=50
    endif

endif

set ignorecase smartcase

" statusline indicates insert or normal mode
set showmode showcmd

" use system clipboard
" https://anuragpeshne.github.io/essays/vim/7.html
noremap y "*y
noremap yy "*yy
noremap Y "*y$
noremap <leader>x "*x
noremap <leader>c "*c
noremap <leader>C "*C
noremap <leader>cc "*cc
noremap <leader>d "*d
noremap <leader>D "*D
noremap <leader>dd "*dd
noremap p "*p
noremap P "*P

noremap x "_x
noremap c "_c
noremap C "_C
noremap cc "_cc
noremap d "_d
noremap D "_D
noremap dd "_dd

nnoremap <esc><esc> :noh<return><esc>

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>

call plug#begin('~/.vim/plugged')
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

Plug 'unblevable/quick-scope'       " Plug

Plug 'machakann/vim-sandwich'
Plug 'andymass/vim-matchup'
Plug 'AndrewRadev/splitjoin.vim'

Plug 'tommcdo/vim-exchange'

Plug 'tpope/vim-repeat'

if has('nvim')
  Plug 'rlane/pounce.nvim'
  " Plug 'ggandor/leap.nvim'
  " Plug 'ggandor/flit.nvim'
  " Plug 'ggandor/leap-spooky.nvim'
else
  Plug 'vim-denops/denops.vim'
  let g:denops_disable_version_check = 1
  Plug 'yuki-yano/fuzzy-motion.vim'
endif

Plug 'lervag/vimtex'

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

highlight QuickScopePrimary gui=underline cterm=underline
highlight QuickScopeSecondary gui=bold cterm=bold

runtime macros/sandwich/keymap/surround.vim

if has('nvim')
  nmap s <cmd>Pounce<CR>
  nmap S <cmd>PounceRepeat<CR>
  xmap s <cmd>Pounce<CR>
  omap gs <cmd>Pounce<CR>  " 's' is used by vim-surround
  nmap S :Pounce <C-r>/<cr> " note: if you want to use <C-r> you cannot use <cmd>
  
  highlight PounceMatch ctermbg=darkgrey guibg=#3b3c39
  highlight PounceGap ctermbg=darkgrey guibg=#262724
  highlight PounceAccept ctermfg=black ctermbg=lightgreen guifg=#000000 guibg=#99ccff
  highlight PounceAcceptBest ctermfg=black ctermbg=lightcyan guifg=#000000 guibg=#ccff88
  
  " lua require('leap').add_default_mappings()
  " lua require('flit').setup { labeled_modes = "nv" }
  " lua require('leap-spooky').setup { prefix = true }
else
  nmap s <cmd>FuzzyMotion<CR>
endif
